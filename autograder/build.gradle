//
// This code is part of AnnoAutoGrader
// Copyright 2018, Dan S. Wallach, Rice University
// Made available subject to the Apache 2.0 License
//
buildscript {
    ext {
        kotlin_version = '1.3.21'
        jackson_version = '2.9.8'
        arrow_version = '0.9.0'
        annoautograder_version = '0.1'

        repos = {
            maven {
                // Google's mirror will be our primary destination
                url "https://maven-central.storage.googleapis.com"
            }

            maven { url 'https://jitpack.io' }
            jcenter()
            mavenCentral()
            maven { url "https://plugins.gradle.org/m2/" }
            maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
            maven { url "http://xbib.org/repository" }
            maven { url "https://dl.bintray.com/arrow-kt/arrow-kt/" }
            maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'com.github.sherter.google-java-format' version '0.8'
    
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "org.jetbrains.kotlin.kapt" version "1.3.21"
}

//apply plugin: 'kotlin'
//apply plugin: 'kotlin-kapt'

group 'edu.rice'
version annoautograder_version

allprojects {
    tasks.withType(JavaCompile) {
        sourceCompatibility = '11'
        targetCompatibility = '11'
    }
}

compileJava {
    options.fork = true
    options.incremental = true
    options.encoding = "UTF-8"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
//    kotlinOptions.allWarningsAsErrors = true
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
//    kotlinOptions.allWarningsAsErrors = true
}

tasks.withType(JavaCompile) {
    // the compilePolicy thing is necessary for ErrorProne
    options.compilerArgs << "-Xlint:all" << "-Xlint:-serial" << "-Xlint:-processing" << "-XDcompilePolicy=byfile"
}

// Makes the "javadoc" action run without a ton of errors and warnings.
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'
    test.java.srcDirs += 'src/main/kotlin'
    test.java.srcDirs += 'src/main/java'
}

configurations {
    ktlint
}

////////////////////////////////////////////////////////////////////////////////
// we want to print the date and other useful stuff every time we compile; helpful when looking at logs
import java.time.format.DateTimeFormatter
import java.time.ZoneId
import java.time.ZonedDateTime

gradle.taskGraph.whenReady {
    printWelcome()
}

def printWelcome () {
    // Engineering note: We have no idea what timezone any given student's computer or any given
    // Travis-CI server might be running in, and we want to print these things in a standard way.
    // By asking for the time in the US-Central timezone, we'll get the uniform response that
    // we want. Also, note that these are just calls to the "java.time" classes that are part of Java.
    // Groovy can call into Java libraries and IntelliJ even does the same sort of auto-complete when editing
    // code here as it does when editing Java code.

    println "Compilation time: " +
            ZonedDateTime.now(ZoneId.of("America/Chicago")).format(DateTimeFormatter.RFC_1123_DATE_TIME)

    // And, while we're here, we might as well print out the Java version
    println "Gradle JDK: " + System.getProperty("java.version")

    // Print everything Gradle knows about itself
    println "Gradle version: $gradle.gradleVersion"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

////////////////////////////////////////////////////////////////////////////////
// This section deals with making jar files. The regular "jar" task builds
// a "thin" Jar file (~200KB) with external dependencies. The "fatJar" action puts
// all the dependencies into a single file (~14MB).

java {
    project.version = annoautograder_version
}

jar {
    manifest {
        attributes "Main-Class": "edu.rice.autograder.GradleResultScannerKt"
    }

    archiveBaseName = 'AnnoAutoGrader'
}

task fatJar(type: Jar) {
    dependsOn 'assemble'

    manifest {
        attributes "Main-Class": "edu.rice.autograder.GradleResultScannerKt"
    }
    archiveBaseName = 'AnnoAutoGrader'
    archiveAppendix = 'fat'

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task annotationsJar(type: Jar) {
    dependsOn 'assemble'

    archiveBaseName = 'AnnoAutoGrader'
    archiveAppendix = 'annotations'
    from sourceSets.main.output.classesDirs
    include '**/annotations/**/*'
    includeEmptyDirs false
}

task allJars {
    dependsOn 'jar', 'fatJar', 'annotationsJar'
}

////////////////////////////////////////////////////////////////////////////////
// This section specifies all the external libraries being used by your Java
// program and where to find them.
repositories {
    mavenCentral()
}


dependencies {
    ktlint "com.github.shyiko:ktlint:0.31.0"

    compile "io.arrow-kt:arrow-core-data:$arrow_version"
    compile "io.arrow-kt:arrow-core-extensions:$arrow_version"
    compile "io.arrow-kt:arrow-syntax:$arrow_version"
    compile "io.arrow-kt:arrow-typeclasses:$arrow_version"
    compile "io.arrow-kt:arrow-extras-data:$arrow_version"
    compile "io.arrow-kt:arrow-extras-extensions:$arrow_version"
    kapt    "io.arrow-kt:arrow-meta:$arrow_version"
    
    // annotations to help ErrorProne and IntelliJ find bugs
    compile 'org.jetbrains:annotations:15.0'
    compile 'com.google.code.findbugs:jsr305:3.0.2'
    compile 'com.google.code.findbugs:annotations:3.0.1'
    compile 'com.google.errorprone:error_prone_annotations:2.3.2'

    // testing libraries: these are only visible from our "test" code, not the "main" code
    testCompile 'org.quicktheories:quicktheories:0.25' // high-tech pattern-based testing library

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}" // Kotlin standard libraries
    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}" // Kotlin standard libraries

    // Support specifically for AnnoAutoGrader
    compile 'io.github.classgraph:classgraph:4.8.21' // for reading class annotations
    compile 'com.beust:jcommander:1.72' // command-line parsing

    // Jackson (for XML, YAML, and other such things)
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"

    compile 'ch.qos.logback:logback-classic:1.2.3' // logging

    // JUnit5 support
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.0'
}
