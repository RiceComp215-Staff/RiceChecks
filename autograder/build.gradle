/*
 * RiceChecks
 * Copyright (c) 2019, Dan S. Wallach, Rice University
 * Available subject to the Apache 2.0 License
 */

buildscript {
    def getVersionName = {
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'describe', '--tags', '--dirty'
                standardOutput = stdout
            }

            return stdout.toString().trim()
        }
        catch (ignored) {
        }

        return "noName"
    }

    ext {
        kotlin_version = '1.3.30'
        jackson_version = '2.9.8'
        arrow_version = '0.9.0'
        ricechecks_version = getVersionName()
        dokka_version = '0.9.18'

        repos = {
            maven { url "https://maven-central.storage.googleapis.com" }
            maven { url 'https://jitpack.io' }
            jcenter()
            mavenCentral()
            maven { url "https://plugins.gradle.org/m2/" }
            maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
            maven { url "http://xbib.org/repository" }
            maven { url "https://dl.bintray.com/arrow-kt/arrow-kt/" }
            maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'checkstyle'
    id 'jacoco'
    id "org.jetbrains.dokka" version '0.9.18'
    id 'com.github.sherter.google-java-format' version '0.8'
    id "com.dorongold.task-tree" version "1.3.1" // useful for gradle task-graph debugging
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "maven-publish"
    id "maven"
    id "java-library"
    id "signing"
}

group 'edu.rice.ricechecks'
version ricechecks_version

checkstyle {
    toolVersion = '8.17'
    configDir = project.file("config/checkstyle")
    reportsDir = project.file("build/reports/checkstyle")
}

googleJavaFormat {
    toolVersion = '1.7'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

allprojects {
    // Makes the "javadoc" action run without a ton of warnings.
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
    
    tasks.withType(JavaCompile) {
        options.fork = true
        options.incremental = true
        options.encoding = "UTF-8"
        // possibly needed for ErrorProne? "-XDcompilePolicy=byfile"
        options.compilerArgs << "-Xlint:all" << "-Xlint:-serial" << "-Xlint:-processing"

        sourceCompatibility = '11'
        targetCompatibility = '11'
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'
    test.java.srcDirs += 'src/main/kotlin'
    test.java.srcDirs += 'src/main/java'
}

configurations {
    ktlint
}

////////////////////////////////////////////////////////////////////////////////
// Linting and code formatting / indentation for Kotlin via ktlint.

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

////////////////////////////////////////////////////////////////////////////////
// This section deals with making jar files. The regular "jar" task builds
// a "thin" Jar file (~200KB), requiring external dependencies. The "fatJar"
// task puts all the dependencies into a single file (~14MB).

java {
    project.version = ricechecks_version
}

jar {
    manifest {
        attributes "Main-Class": "edu.rice.autograder.AutoGraderKt"
    }
    archiveBaseName = 'ricechecks'
}

task annotationSourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveBaseName = 'ricechecks-annotations'
    archiveClassifier = 'sources'
}

task allSourcesJar(type: Jar) {
    from sourceSets.main.getAllSource()
    archiveBaseName = 'ricechecks'
    archiveClassifier = 'sources'
}

task annotationJavadocJar(type: Jar) {
    from javadoc
    archiveBaseName = 'ricechecks-annotations'
    archiveClassifier = 'javadoc'
}

task annotationsJar(type: Jar) {
    dependsOn 'jar'

    archiveBaseName = 'ricechecks-annotations'
    from sourceSets.main.output.classesDirs
    include '**/annotations/**/*'
    includeEmptyDirs false
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'html'
    outputDirectory = javadoc.destinationDir
    outputDirectory = "$buildDir/kdoc"
    inputs.dir 'src/main/kotlin'
}

task dokkaJar(type: Jar, dependsOn: dokkaJavadoc) {
    from "$buildDir/kdoc"
    archiveBaseName = 'ricechecks'
    archiveClassifier = 'javadoc'
}

// we don't build this by default, since it's a 12+MB monster
task fatJar(type: Jar) {
    manifest {
        attributes "Main-Class": "edu.rice.autograder.AutoGraderKt"
    }
    archiveBaseName = 'ricechecks'
    archiveClassifier = "fatjar"

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    with jar
}

task allJars {
    dependsOn 'jar', 'annotationsJar', 'annotationSourcesJar', 'annotationJavadocJar', 'allSourcesJar', 'dokkaJar'
}

////////////////////////////////////////////////////////////////////////////////
// This section deals with publishing Jar files.
// Borrowed from here: https://github.com/thombergs/diffparser/blob/master/build.gradle

def getBuildNumber = {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--all', '--count'
            standardOutput = stdout
        }

        return stdout.toString().trim() // .toInteger()
    }
    catch (ignored) {
    }

    return "0"
}

ext {
    buildNumber = getBuildNumber()
}

artifacts {
    archives jar
    archives annotationsJar
    archives annotationSourcesJar
    archives annotationJavadocJar
    archives allSourcesJar
    archives dokkaJar
}

// possibly helpful:
// https://discuss.gradle.org/t/how-to-publish-multiple-artifacts-w-sources-per-project/7361
// https://gist.github.com/kriegerd/4688748
// https://stackoverflow.com/questions/7826652/how-to-upload-an-existing-collection-of-3rd-party-jars-to-a-maven-server-in-grad/27416369#27416369

def fixPomXml(pomXml) {
    def root = pomXml.asNode()
    def moreStuff = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "danwallach"
                name "Dan Wallach"
                email "dwallach@rice.edu"
            }
        }

        scm {
            url "https://github.com/RiceComp215-Staff/RiceChecks"
        }

        packaging 'jar'
    }
    root.appendNode('description', 'Gradle-based Java AutoGrader')
    root.appendNode('name', 'RiceChecks')
    root.appendNode('url', 'https://github.com/RiceComp215-Staff/RiceChecks')
    return root.children().last() + moreStuff
}

// Machinery to get the key passphrase without needing to leave it in a file
// https://stackoverflow.com/questions/19487576/gradle-build-null-console-object
import groovy.swing.SwingBuilder
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        def password = ''
        if(System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true, title: 'Enter password', alwaysOnTop: true, resizable: false, locationRelativeTo: null, pack: true, show: true) {
                    vbox { // Put everything below each other
                        label(text: "Please enter GPG passphrase:")
                        def input1 = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            password = input1.password
                            dispose()
                        })
                    }
                }
            }
        } else {
            password = System.console().readPassword("\nPlease enter GPG passphrase: ")
        }

        if(password.size() <= 0) {
            throw new InvalidUserDataException("You must enter the passwords to proceed.")
        }

        allprojects {
            ext."signing.password" = new String(password)
        }
    }
}

publishing {
    publications {
        annotations(MavenPublication) {
            // Note: no call to "from components.java"; instead, we're explicitly
            // specifying only the artifacts we care about. This is to avoid getting
            // all the recursive dependencies for the annotations, which can safely
            // stand alone. Conversely, for the tool, specified below, we do want
            // all the recursive dependencies.

            groupId 'edu.rice.ricechecks'
            artifactId 'ricechecks-annotations'
            artifact annotationsJar
            artifact annotationSourcesJar
            artifact annotationJavadocJar
            version project.version
            pom.withXml { fixPomXml(it) }
        }
        tool(MavenPublication) {
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            from components.kotlin
            groupId 'edu.rice.ricechecks'
            artifactId 'ricechecks'
            artifact allSourcesJar
            artifact dokkaJar
            version project.version
            pom.withXml { fixPomXml(it) }
        }
    }
}

signing {
    sign publishing.publications.annotations
    sign publishing.publications.tool
}

////////////////////////////////////////////////////////////////////////////////
// This section specifies all the external libraries being used by your Java
// program and where to find them.
repositories {
    maven { url "https://maven-central.storage.googleapis.com" }
    jcenter()
    mavenCentral()
}

dependencies {
    ktlint "com.github.shyiko:ktlint:0.31.0"

    // Arrow adds useful functional programming features to Kotlin
    implementation "io.arrow-kt:arrow-core-data:$arrow_version"
    implementation "io.arrow-kt:arrow-core-extensions:$arrow_version"
    implementation "io.arrow-kt:arrow-syntax:$arrow_version"
//    implementation "io.arrow-kt:arrow-typeclasses:$arrow_version"
//    implementation "io.arrow-kt:arrow-extras-data:$arrow_version"
//    implementation "io.arrow-kt:arrow-extras-extensions:$arrow_version"
//    kapt    "io.arrow-kt:arrow-meta:$arrow_version"
    
    // annotations to help ErrorProne and IntelliJ find bugs
    implementation 'org.jetbrains:annotations:15.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'com.google.code.findbugs:annotations:3.0.1'
    implementation 'com.google.errorprone:error_prone_annotations:2.3.2'

    // Kotlin standard libraries
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version" 
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Useful general-purpose libraries
    implementation 'io.github.classgraph:classgraph:4.8.25' // for reading class annotations
    implementation 'com.beust:jcommander:1.72' // command-line parsing
    implementation 'ch.qos.logback:logback-classic:1.2.3' // logging
    implementation "com.github.davidmoten:word-wrap:0.1.6" // fancy word-wrapping library

    // Jackson (for XML, YAML, and other such things)
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version"

    // JUnit5 support & pattern-based testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.0'
    testImplementation 'org.quicktheories:quicktheories:0.25'
}
